CREATE SCHEMA LibraryManagement;
USE LibraryManagement;

CREATE TABLE authors (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    author_name VARCHAR(255) NOT NULL
);
  
CREATE TABLE genres (
    genre_id INT AUTO_INCREMENT PRIMARY KEY,
    genre_name VARCHAR(255) NOT NULL
);

CREATE TABLE books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    publication_year YEAR NOT NULL,
    author_id INT NOT NULL,
    genre_id INT NOT NULL,
    FOREIGN KEY (author_id) REFERENCES authors(author_id),
    FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
);

CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL
);

CREATE TABLE borrowed_books (
    borrow_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT NOT NULL,
    user_id INT NOT NULL,
    borrow_date DATE NOT NULL,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES books(book_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-------------------------------------------------------------------------------------

USE LibraryManagement;

INSERT INTO authors (author_name) VALUES
('Lesya Ukrainka'),
('Lina Kostenko');

INSERT INTO genres (genre_name) VALUES
('Fiction'),
('Adventure');

INSERT INTO books (title, publication_year, author_id, genre_id) VALUES
('The Forest Song', 1911, 1, 1),
('Marusya Churai', 1979, 2, 2);

INSERT INTO users (username, email) VALUES
('mariia_red', 'mariia_red@example.com'),
('mark_tw', 'mark_tw@example.com');

INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES
(1, 1, '2024-07-05', '2024-07-15'),
(2, 2, '2024-07-10', '2024-07-29');

---------------------------------------------------------------------------------------

USE mydb;
SELECT 
    orders.id AS order_id,
    customers.name AS customer_name,
    employees.last_name AS employee_last_name,
    employees.first_name AS employee_first_name,
    shippers.name AS shipper_name,
    products.name AS product_name,
    categories.name AS category_name,
    suppliers.name AS supplier_name,
    order_details.quantity,
    orders.date AS order_date
FROM 
    orders
INNER JOIN 
    customers ON orders.customer_id = customers.id
INNER JOIN 
    employees ON orders.employee_id = employees.employee_id
INNER JOIN 
    shippers ON orders.shipper_id = shippers.id
INNER JOIN 
    order_details ON orders.id = order_details.order_id
INNER JOIN 
    products ON order_details.product_id = products.id
INNER JOIN 
    categories ON products.category_id = categories.id
INNER JOIN 
    suppliers ON products.supplier_id = suppliers.id;

---------------------------------------------------------------------------------

SELECT COUNT(*)
FROM 
    orders
INNER JOIN 
    customers ON orders.customer_id = customers.id
INNER JOIN 
    employees ON orders.employee_id = employees.employee_id
INNER JOIN 
    shippers ON orders.shipper_id = shippers.id
INNER JOIN 
    order_details ON orders.id = order_details.order_id
INNER JOIN 
    products ON order_details.product_id = products.id
INNER JOIN 
    categories ON products.category_id = categories.id
INNER JOIN 
    suppliers ON products.supplier_id = suppliers.id;

---------------------------------------------------------------------------------

USE mydb;
SELECT COUNT(*)
FROM 
    orders
LEFT JOIN 
    customers ON orders.customer_id = customers.id
LEFT JOIN 
    employees ON orders.employee_id = employees.employee_id
LEFT JOIN 
    shippers ON orders.shipper_id = shippers.id
LEFT JOIN 
    order_details ON orders.id = order_details.order_id
LEFT JOIN 
    products ON order_details.product_id = products.id
LEFT JOIN 
    categories ON products.category_id = categories.id
LEFT JOIN 
    suppliers ON products.supplier_id = suppliers.id;

----------------------------------------------------------------------------------

After changing to LEFT join we observe the same count of rows. This indicates that there are no unmatched rows in the primary table.
That's why INNER JOIN and LEFT JOIN/RIGHT JOIN produce the same result.

-----------------------------------------------------------------------------------

SELECT 
    orders.id AS order_id,
    customers.name AS customer_name,
    employees.last_name AS employee_last_name,
    employees.first_name AS employee_first_name,
    shippers.name AS shipper_name,
    products.name AS product_name,
    categories.name AS category_name,
    suppliers.name AS supplier_name,
    order_details.quantity,
    orders.date AS order_date
FROM 
    orders
INNER JOIN 
    customers ON orders.customer_id = customers.id
INNER JOIN 
    employees ON orders.employee_id = employees.employee_id
INNER JOIN 
    shippers ON orders.shipper_id = shippers.id
INNER JOIN 
    order_details ON orders.id = order_details.order_id
INNER JOIN 
    products ON order_details.product_id = products.id
INNER JOIN 
    categories ON products.category_id = categories.id
INNER JOIN 
    suppliers ON products.supplier_id = suppliers.id
WHERE 
    orders.employee_id > 3 AND orders.employee_id <= 10;

------------------------------------------------------------------------------------

SELECT 
    categories.name AS category_name,
    COUNT(*) AS num_rows,
    AVG(order_details.quantity) AS avg_quantity
FROM 
    orders
INNER JOIN 
    order_details ON orders.id = order_details.order_id
INNER JOIN 
    products ON order_details.product_id = products.id
INNER JOIN 
    categories ON products.category_id = categories.id
WHERE 
    orders.employee_id > 3 AND orders.employee_id <= 10
GROUP BY 
    categories.name;

-------------------------------------------------------------------------------------

SELECT 
    categories.name AS category_name,
    COUNT(*) AS num_rows,
    AVG(order_details.quantity) AS avg_quantity
FROM 
    orders
INNER JOIN 
    order_details ON orders.id = order_details.order_id
INNER JOIN 
    products ON order_details.product_id = products.id
INNER JOIN 
    categories ON products.category_id = categories.id
WHERE 
    orders.employee_id > 3 AND orders.employee_id <= 10
GROUP BY 
    categories.name
HAVING 
    AVG(order_details.quantity) >= 21;

---------------------------------------------------------------------------------------

SELECT 
    categories.name AS category_name,
    COUNT(*) AS num_rows,
    AVG(order_details.quantity) AS avg_quantity
FROM 
    orders
INNER JOIN 
    order_details ON orders.id = order_details.order_id
INNER JOIN 
    products ON order_details.product_id = products.id
INNER JOIN 
    categories ON products.category_id = categories.id
WHERE 
    orders.employee_id > 3 AND orders.employee_id <= 10
GROUP BY 
    categories.name
HAVING 
    AVG(order_details.quantity) >= 21
ORDER BY 
	num_rows DESC;

--------------------------------------------------------------------------------------------

SELECT 
    categories.name AS category_name,
    COUNT(*) AS num_rows,
    AVG(order_details.quantity) AS avg_quantity
FROM 
    orders
INNER JOIN 
    order_details ON orders.id = order_details.order_id
INNER JOIN 
    products ON order_details.product_id = products.id
INNER JOIN 
    categories ON products.category_id = categories.id
WHERE 
    orders.employee_id > 3 AND orders.employee_id <= 10
GROUP BY 
    categories.name
HAVING 
    AVG(order_details.quantity) >= 21
ORDER BY 
    num_rows DESC
LIMIT 4 OFFSET 1;



